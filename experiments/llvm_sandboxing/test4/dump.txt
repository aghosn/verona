TranslationUnitDecl 0x4d49f58 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x4d4a860 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x4d4a500 '__int128'
|-TypedefDecl 0x4d4a8d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x4d4a520 'unsigned __int128'
|-TypedefDecl 0x4d4ac48 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x4d4a9c0 '__NSConstantString_tag'
|   `-CXXRecord 0x4d4a928 '__NSConstantString_tag'
|-TypedefDecl 0x4d4ace0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x4d4aca0 'char *'
|   `-BuiltinType 0x4d4a000 'char'
|-TypedefDecl 0x4d8ceb8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag [1]'
| `-ConstantArrayType 0x4d8ce60 '__va_list_tag [1]' 1 
|   `-RecordType 0x4d4add0 '__va_list_tag'
|     `-CXXRecord 0x4d4ad38 '__va_list_tag'
|-CXXRecordDecl 0x4d8cf10 <./main.cc:1:1, line:4:1> line:1:8 referenced struct Library definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x4d8d028 <col:1, col:8> col:8 implicit struct Library
| `-CXXMethodDecl 0x4d8d258 <line:3:3, col:33> col:8 used send 'void (int, void *)'
|   |-ParmVarDecl 0x4d8d0d0 <col:13, col:17> col:17 idx 'int'
|   |-ParmVarDecl 0x4d8d150 <col:22, col:28> col:28 ptr 'void *'
|   `-CompoundStmt 0x4d8d320 <col:32, col:33>
|-VarDecl 0x4d8d340 <line:6:1, col:10> col:10 used _sandbox_libraries 'Library *'
|-LinkageSpecDecl 0x4d8d488 <line:8:1, col:32> col:8 C
| `-FunctionDecl 0x4d8d650 <col:12, col:32> col:16 used foo 'int (int, int)'
|   |-ParmVarDecl 0x4d8d4f0 <col:20, col:24> col:24 a 'int'
|   `-ParmVarDecl 0x4d8d570 <col:27, col:31> col:31 b 'int'
|-LinkageSpecDecl 0x4d8d720 <line:11:1, col:22> col:8 C
| `-FunctionDecl 0x4d8d7b8 <col:12, col:22> col:17 food 'void ()'
|-FunctionDecl 0x4d8d8b0 <line:13:1, line:16:1> line:13:5 bar 'int ()'
| `-CompoundStmt 0x4d8d980 <line:14:1, line:16:1>
|   `-ReturnStmt 0x4d8d970 <line:15:3, col:10>
|     `-IntegerLiteral 0x4d8d950 <col:10> 'int' 3
|-FunctionDecl 0x4d8dad0 <line:18:1, line:30:1> line:18:5 food 'int (int, int)'
| |-ParmVarDecl 0x4d8d9b0 <col:10, col:14> col:14 used c 'int'
| |-ParmVarDecl 0x4d8da30 <col:17, col:21> col:21 used d 'int'
| `-CompoundStmt 0x4df4378 <col:24, line:30:1>
|   |-DeclStmt 0x4df38e0 <line:19:3, line:24:4>
|   | `-CXXRecordDecl 0x4d8db90 <line:19:3, line:24:3> line:19:10 referenced struct Argument definition
|   |   |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
|   |   | |-DefaultConstructor exists trivial
|   |   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial
|   |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-CXXRecordDecl 0x4d8dca8 <col:3, col:10> col:10 implicit struct Argument
|   |   |-FieldDecl 0x4d8dd50 <line:21:5, col:9> col:9 referenced a 'int'
|   |   |-FieldDecl 0x4df3810 <line:22:5, col:9> col:9 referenced b 'int'
|   |   |-FieldDecl 0x4df3878 <line:23:5, col:9> col:9 referenced ret 'int'
|   |   |-CXXConstructorDecl 0x4df3988 <line:19:10> col:10 implicit used Argument 'void () noexcept' inline default trivial
|   |   | `-CompoundStmt 0x4df3e08 <col:10>
|   |   |-CXXConstructorDecl 0x4df3a88 <col:10> col:10 implicit constexpr Argument 'void (const Argument &)' inline default trivial noexcept-unevaluated 0x4df3a88
|   |   | `-ParmVarDecl 0x4df3b98 <col:10> col:10 'const Argument &'
|   |   `-CXXConstructorDecl 0x4df3c48 <col:10> col:10 implicit constexpr Argument 'void (Argument &&)' inline default trivial noexcept-unevaluated 0x4df3c48
|   |     `-ParmVarDecl 0x4df3d58 <col:10> col:10 'Argument &&'
|   |-DeclStmt 0x4df3f58 <line:25:3, col:16>
|   | `-VarDecl 0x4df3908 <col:3, col:12> col:12 used zoob 'Argument' callinit
|   |   `-CXXConstructExpr 0x4df3f30 <col:12> 'Argument' 'void () noexcept'
|   |-BinaryOperator 0x4df3ff8 <line:26:3, col:12> 'int' lvalue '='
|   | |-MemberExpr 0x4df3f90 <col:3, col:8> 'int' lvalue .a 0x4d8dd50
|   | | `-DeclRefExpr 0x4df3f70 <col:3> 'Argument' lvalue Var 0x4df3908 'zoob' 'Argument'
|   | `-ImplicitCastExpr 0x4df3fe0 <col:12> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x4df3fc0 <col:12> 'int' lvalue ParmVar 0x4d8d9b0 'c' 'int'
|   |-BinaryOperator 0x4df40a0 <line:27:3, col:12> 'int' lvalue '='
|   | |-MemberExpr 0x4df4038 <col:3, col:8> 'int' lvalue .b 0x4df3810
|   | | `-DeclRefExpr 0x4df4018 <col:3> 'Argument' lvalue Var 0x4df3908 'zoob' 'Argument'
|   | `-ImplicitCastExpr 0x4df4088 <col:12> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x4df4068 <col:12> 'int' lvalue ParmVar 0x4d8da30 'd' 'int'
|   |-CXXMemberCallExpr 0x4df4200 <line:28:3, col:43> 'void'
|   | |-MemberExpr 0x4df40f8 <col:3, col:23> '<bound member function type>' ->send 0x4d8d258
|   | | `-ImplicitCastExpr 0x4df40e0 <col:3> 'Library *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x4df40c0 <col:3> 'Library *' lvalue Var 0x4d8d340 '_sandbox_libraries' 'Library *'
|   | |-IntegerLiteral 0x4df4128 <col:28> 'int' 0
|   | `-CStyleCastExpr 0x4df41d8 <col:31, col:39> 'void *' <NoOp>
|   |   `-ImplicitCastExpr 0x4df41c0 <col:38, col:39> 'void *' <BitCast> part_of_explicit_cast
|   |     `-UnaryOperator 0x4df4168 <col:38, col:39> 'Argument *' prefix '&' cannot overflow
|   |       `-DeclRefExpr 0x4df4148 <col:39> 'Argument' lvalue Var 0x4df3908 'zoob' 'Argument'
|   `-ReturnStmt 0x4df4368 <line:29:3, col:15>
|     `-ImplicitCastExpr 0x4df4350 <col:10, col:15> 'int' <LValueToRValue>
|       `-MemberExpr 0x4df4320 <col:10, col:15> 'int' lvalue .ret 0x4df3878
|         `-DeclRefExpr 0x4df4300 <col:10> 'Argument' lvalue Var 0x4df3908 'zoob' 'Argument'
|-NamespaceDecl 0x4df43b8 <verona_interface.cc:2:1, line:3:2> line:2:11 verona
| `-NamespaceDecl 0x4df4428 <col:20, line:3:1> line:2:30 __ffi_internal
`-FunctionDecl 0x4df44d0 prev 0x4d8d650 <line:4:1> col:1 used foo 'int (int, int)'
  |-ParmVarDecl 0x4df4570 <col:1> col:1 used arg0 'int'
  |-ParmVarDecl 0x4df45d8 <col:1> col:1 used arg1 'int'
  |-CompoundStmt 0x4dfec18 <col:1>
  | |-DeclStmt 0x4dfe7d0 <col:1>
  | | `-CXXRecordDecl 0x4df4660 <<invalid sloc>> <invalid sloc> implicit struct tmp_struct definition
  | |   |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_mutable_fields can_const_default_init
  | |   | |-DefaultConstructor exists trivial needs_implicit
  | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
  | |   | |-MoveConstructor exists simple trivial needs_implicit
  | |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
  | |   | |-MoveAssignment exists simple trivial needs_implicit
  | |   | `-Destructor simple irrelevant trivial needs_implicit
  | |   |-TypeVisibilityAttr 0x4df4710 <<invalid sloc>> Implicit Default
  | |   |-FieldDecl 0x4dfe6b0 <col:1> col:1 a0 'int' mutable
  | |   |-FieldDecl 0x4dfe718 <col:1> col:1 a1 'int' mutable
  | |   `-FieldDecl 0x4dfe780 <col:1> col:1 ret 'int' mutable
  | |-DeclStmt 0x4dfe8b8 <col:1>
  | | `-VarDecl 0x4dfe7f8 <col:1> col:1 used _a_ 'tmp_struct'
  | |   `-UsedAttr 0x4dfe860 <<invalid sloc>>
  | |-BinaryOperator 0x4dfe978 <col:1> 'int' lvalue bitfield '='
  | | |-MemberExpr 0x4dfe948 <col:1> 'int' lvalue bitfield .a0 0x4dfe6b0
  | | | `-DeclRefExpr 0x4dfe918 <col:1> 'tmp_struct' lvalue Var 0x4dfe7f8 '_a_' 'tmp_struct'
  | | `-ImplicitCastExpr 0x4dfe900 <col:1> 'int' <LValueToRValue> part_of_explicit_cast
  | |   `-DeclRefExpr 0x4dfe8d0 <col:1> 'int' lvalue ParmVar 0x4df4570 'arg0' 'int'
  | |-BinaryOperator 0x4dfea40 <col:1> 'int' lvalue bitfield '='
  | | |-MemberExpr 0x4dfea10 <col:1> 'int' lvalue bitfield .a1 0x4dfe718
  | | | `-DeclRefExpr 0x4dfe9e0 <col:1> 'tmp_struct' lvalue Var 0x4dfe7f8 '_a_' 'tmp_struct'
  | | `-ImplicitCastExpr 0x4dfe9c8 <col:1> 'int' <LValueToRValue> part_of_explicit_cast
  | |   `-DeclRefExpr 0x4dfe998 <col:1> 'int' lvalue ParmVar 0x4df45d8 'arg1' 'int'
  | `-CXXMemberCallExpr 0x4dfebe8 <col:1> 'void'
  |   |-MemberExpr 0x4dfebb8 <col:1> 'void (int, void *)' lvalue ->send 0x4d8d258
  |   | `-ImplicitCastExpr 0x4dfeba0 <col:1> 'Library *' lvalue <LValueToRValue>
  |   |   `-DeclRefExpr 0x4dfeb70 <col:1> 'Library *' lvalue Var 0x4d8d340 '_sandbox_libraries' 'Library *'
  |   |-IntegerLiteral 0x4dfeb50 <<invalid sloc>> 'int' 0
  |   `-CStyleCastExpr 0x4dfeb28 <col:1> 'void *' <NoOp>
  |     `-ImplicitCastExpr 0x4dfeaf8 <col:1> 'void *' <BitCast> part_of_explicit_cast
  |       `-UnaryOperator 0x4dfeab8 <col:1> 'tmp_struct *' prefix '&' cannot overflow
  |         `-DeclRefExpr 0x4dfea60 <col:1> 'tmp_struct' lvalue Var 0x4dfe7f8 '_a_' 'tmp_struct'
  `-UsedAttr 0x4dfec50 <<invalid sloc>>
; ModuleID = 'verona_interface.cc'
source_filename = "verona_interface.cc"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Library = type { i8 }
%struct.Argument = type { i32, i32, i32 }
%struct.tmp_struct = type { i32, i32, i32 }

$_ZN7Library4sendEiPv = comdat any

@_sandbox_libraries = global %struct.Library* null, align 8
@llvm.compiler.used = appending global [1 x i8*] [i8* bitcast (i32 (i32, i32)* @foo to i8*)], section "llvm.metadata"

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define i32 @_Z3barv() #0 {
entry:
  ret i32 3
}

; Function Attrs: mustprogress noinline optnone uwtable
define i32 @_Z4foodii(i32 %c, i32 %d) #1 {
entry:
  %c.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %zoob = alloca %struct.Argument, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %a = getelementptr inbounds %struct.Argument, %struct.Argument* %zoob, i32 0, i32 0
  store i32 %0, i32* %a, align 4
  %1 = load i32, i32* %d.addr, align 4
  %b = getelementptr inbounds %struct.Argument, %struct.Argument* %zoob, i32 0, i32 1
  store i32 %1, i32* %b, align 4
  %2 = load %struct.Library*, %struct.Library** @_sandbox_libraries, align 8
  %3 = bitcast %struct.Argument* %zoob to i8*
  call void @_ZN7Library4sendEiPv(%struct.Library* nonnull align 1 dereferenceable(1) %2, i32 0, i8* %3)
  %ret = getelementptr inbounds %struct.Argument, %struct.Argument* %zoob, i32 0, i32 2
  %4 = load i32, i32* %ret, align 4
  ret i32 %4
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr void @_ZN7Library4sendEiPv(%struct.Library* nonnull align 1 dereferenceable(1) %this, i32 %idx, i8* %ptr) #0 comdat align 2 {
entry:
  %this.addr = alloca %struct.Library*, align 8
  %idx.addr = alloca i32, align 4
  %ptr.addr = alloca i8*, align 8
  store %struct.Library* %this, %struct.Library** %this.addr, align 8
  store i32 %idx, i32* %idx.addr, align 4
  store i8* %ptr, i8** %ptr.addr, align 8
  %this1 = load %struct.Library*, %struct.Library** %this.addr, align 8
  ret void
}

; Function Attrs: mustprogress noinline optnone uwtable
define i32 @foo(i32 %arg0, i32 %arg1) #1 {
entry:
  %arg0.addr = alloca i32, align 4
  %arg1.addr = alloca i32, align 4
  %_a_ = alloca %struct.tmp_struct, align 4
  store i32 %arg0, i32* %arg0.addr, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  %0 = load i32, i32* %arg0.addr, align 4
  %a0 = getelementptr inbounds %struct.tmp_struct, %struct.tmp_struct* %_a_, i32 0, i32 0
  store i32 %0, i32* %a0, align 4
  %1 = load i32, i32* %arg1.addr, align 4
  %a1 = getelementptr inbounds %struct.tmp_struct, %struct.tmp_struct* %_a_, i32 0, i32 1
  store i32 %1, i32* %a1, align 4
  %2 = load %struct.Library*, %struct.Library** @_sandbox_libraries, align 8
  %3 = bitcast %struct.tmp_struct* %_a_ to i8*
  call void @_ZN7Library4sendEiPv(%struct.Library* nonnull align 1 dereferenceable(1) %2, i32 0, i8* %3)
  call void @llvm.trap()
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { cold noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 2}
!4 = !{!"clang version 14.0.0 (https://github.com/llvm/llvm-project a19747ea7395dd470345e4703f13bbb74647b019)"}
